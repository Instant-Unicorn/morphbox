#!/bin/bash
set -euo pipefail

# MorphBox Launcher - Simplified version

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${GREEN}[INFO]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
WEB_DIR="$SCRIPT_DIR/web"

# Load config from .morphbox.env if exists
if [[ -f "$SCRIPT_DIR/.morphbox.env" ]]; then
    source "$SCRIPT_DIR/.morphbox.env"
fi

# Default to local only
BIND_HOST="${MORPHBOX_HOST:-localhost}"
ACCESS_MODE="${MORPHBOX_BIND_MODE:-local}"
DEV_MODE=false

# Apply bind mode
if [[ "$ACCESS_MODE" == "external" ]]; then
    BIND_HOST="0.0.0.0"
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --external)
            BIND_HOST="0.0.0.0"
            ACCESS_MODE="external"
            shift
            ;;
        --local)
            BIND_HOST="localhost"
            ACCESS_MODE="local"
            shift
            ;;
        --dev)
            DEV_MODE=true
            shift
            ;;
        --help)
            echo "MorphBox Launcher"
            echo ""
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --local     Bind to localhost only (default)"
            echo "  --external  Bind to all interfaces (WARNING: exposes to network)"
            echo "  --dev       Skip security warnings (development mode)"
            echo "  --help      Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0              # Start locally (safe)"
            echo "  $0 --external   # Expose to network (use with caution)"
            echo "  $0 --external --dev   # External mode without prompts"
            exit 0
            ;;
        *)
            error "Unknown option: $1. Use --help for usage."
            ;;
    esac
done

# Check dependencies
if ! command -v node > /dev/null; then
    error "Node.js is not installed. Please install Node.js 18 or later"
fi

# Install dependencies if needed
if [[ ! -d "$WEB_DIR/node_modules" ]]; then
    info "Installing dependencies..."
    cd "$WEB_DIR" && npm install
fi

# Show security warning if external (unless in dev mode)
if [[ "$ACCESS_MODE" == "external" ]] && [[ "$DEV_MODE" != "true" ]]; then
    echo ""
    warn "⚠️  SECURITY WARNING ⚠️"
    warn "MorphBox will be accessible from external networks!"
    warn "This exposes your development environment to potential security risks."
    warn "Only use --external on trusted networks."
    echo ""
    read -p "Continue with external access? (y/N) " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Aborted. Use without --external for local-only access."
        exit 0
    fi
fi

# Kill any existing processes
pkill -f "tsx.*websocket-server" 2>/dev/null || true
pkill -f "vite dev" 2>/dev/null || true

# Start Docker container if not running
info "Checking Docker container..."
if ! docker ps | grep -q morphbox-vm; then
    info "Starting MorphBox VM container..."
    cd "$SCRIPT_DIR"
    docker compose up -d
    sleep 2
else
    info "MorphBox VM container already running"
fi

# Check for Claude updates in container
check_claude_updates() {
    info "Checking for Claude updates..."
    
    # Get current version
    CURRENT_VERSION=$(docker exec -u morphbox morphbox-vm npm list -g @anthropic-ai/claude-code 2>/dev/null | grep '@anthropic-ai/claude-code@' | sed 's/.*@anthropic-ai\/claude-code@//' | tr -d ' ')
    
    if [[ -z "$CURRENT_VERSION" ]]; then
        warn "Could not determine Claude version"
        return 0
    fi
    
    # Check for updates (this will be silent if already up to date)
    UPDATE_CHECK=$(docker exec -u morphbox morphbox-vm npm outdated -g @anthropic-ai/claude-code 2>/dev/null | grep '@anthropic-ai/claude-code' || true)
    
    if [[ -n "$UPDATE_CHECK" ]]; then
        LATEST_VERSION=$(echo "$UPDATE_CHECK" | awk '{print $4}')
        info "Claude update available: $CURRENT_VERSION → $LATEST_VERSION"
        info "Updating Claude in container..."
        
        if docker exec -u morphbox morphbox-vm npm update -g @anthropic-ai/claude-code > /dev/null 2>&1; then
            NEW_VERSION=$(docker exec -u morphbox morphbox-vm npm list -g @anthropic-ai/claude-code 2>/dev/null | grep '@anthropic-ai/claude-code@' | sed 's/.*@anthropic-ai\/claude-code@//' | tr -d ' ')
            info "Claude updated successfully to version $NEW_VERSION"
        else
            warn "Failed to update Claude - auto-update may still work inside the terminal"
        fi
    else
        info "Claude is up to date (version $CURRENT_VERSION)"
    fi
}

# Run update check
check_claude_updates

# Get local IP for external mode
if [[ "$ACCESS_MODE" == "external" ]]; then
    LOCAL_IP=$(hostname -I | awk '{print $1}')
    WS_URL="ws://${LOCAL_IP}:8009"
    WEB_URL="http://${LOCAL_IP}:8008"
else
    WS_URL="ws://localhost:8009"
    WEB_URL="http://localhost:8008"
fi

# Start WebSocket server
info "Starting WebSocket server..."
cd "$WEB_DIR"
MORPHBOX_HOST="$BIND_HOST" npm run dev:ws > "$SCRIPT_DIR/websocket.log" 2>&1 &
WS_PID=$!

# Wait for WebSocket server
sleep 2

# Start SvelteKit dev server
info "Starting MorphBox web interface..."
npm run dev -- --host "$BIND_HOST" > "$SCRIPT_DIR/web.log" 2>&1 &
WEB_PID=$!

# Wait for web server
sleep 3

info "MorphBox is running!"
echo ""
if [[ "$DEV_MODE" == "true" ]]; then
    info "Development mode enabled (warnings disabled)"
fi
if [[ "$ACCESS_MODE" == "external" ]]; then
    echo -e "${BLUE}External Access Enabled:${NC}"
    info "- Web interface: $WEB_URL"
    info "- Also accessible at: http://${BIND_HOST}:8008"
    info "- WebSocket server: $WS_URL"
    echo ""
    warn "Remember to configure firewall rules if needed"
else
    info "- Web interface: $WEB_URL"
    info "- WebSocket server: $WS_URL"
fi
info ""
info "Press Ctrl+C to stop all services"

# Cleanup function
cleanup() {
    echo ""
    info "Stopping MorphBox..."
    kill $WS_PID 2>/dev/null || true
    kill $WEB_PID 2>/dev/null || true
    pkill -f "tsx.*websocket-server" 2>/dev/null || true
    pkill -f "vite dev" 2>/dev/null || true
    
    # Automatically stop Docker container
    if docker ps | grep -q morphbox-vm; then
        info "Stopping Docker container..."
        cd "$SCRIPT_DIR"
        docker compose down
    fi
    
    info "MorphBox stopped"
    exit 0
}

# Set up signal handler
trap cleanup SIGINT SIGTERM

# Wait for processes
wait